plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	//sonarqube
	id 'org.sonarqube' version '3.3'
	//jacoco
	id 'jacoco'
}

group = 'com.psc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

//jacoco 버전 명시
jacoco {
	toolVersion = '0.8.6'
}

jar {
	enabled = false
}


jacocoTestReport {
	reports {
		html.enabled true
		csv.enabled true
		xml.enabled false
	}
	finalizedBy 'jacocoTestCoverageVerification'
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'mysql:mysql-connector-java'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//sonarqube
	implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'
	//test - lombok
	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			// 클래스 단위로 테스트 커버리지 측정
			element = 'CLASS'

			// 분기 커버리지 100%
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0
			}

			// 문장 커버리지 80%
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0
			}

			// 스프링 부트 메인 메소드 제외
			excludes = ['com.psc.j211.J211Application']
		}
	}
}
sonarqube {
	properties {
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", "aeef8596f50ad4a53192a4054cabf26a608e5f13"
		property "sonar.sources", "src"
		property "sonar.language", "java"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.profile", "Sonar way"
		property "sonar.test.inclusions", "**/*Test.java"
		property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}
tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}
